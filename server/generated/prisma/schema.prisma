// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique @db.VarChar(50)
  email          String   @unique @db.VarChar(100)
  password       String   @db.VarChar(255)
  role           Role
  firstName      String?  @map("first_name") @db.VarChar(50)
  lastName       String?  @map("last_name") @db.VarChar(50)
  profilePicture String?  @map("profile_picture") @db.VarChar(255)
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  quizzes         Quiz[]
  quizSubmissions QuizSubmission[]
  teacherRatings  TeacherRating[]  @relation("TeacherRating")
  studentRatings  TeacherRating[]  @relation("StudentRating")
  notes           Note[]
  noteAccesses    NoteAccess[]

  @@map("users")
}

enum Role {
  admin
  teacher
  student
}

model Quiz {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  description  String?  @db.Text
  teacherId    Int      @map("teacher_id")
  timeLimit    Int      @map("time_limit")
  passingScore Int      @map("passing_score")
  isPublished  Boolean  @default(false) @map("is_published")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  teacher     User             @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  questions   Question[]
  submissions QuizSubmission[]

  @@map("quizzes")
}

model Question {
  id            Int            @id @default(autoincrement())
  quizId        Int            @map("quiz_id")
  text          String         @db.Text
  optionA       String         @map("option_a") @db.Text
  optionB       String         @map("option_b") @db.Text
  optionC       String         @map("option_c") @db.Text
  optionD       String         @map("option_d") @db.Text
  correctOption QuestionOption @map("correct_option")
  createdAt     DateTime       @default(now()) @map("created_at")

  // Relations
  quiz    Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers StudentAnswer[]

  @@map("questions")
}

enum QuestionOption {
  a
  b
  c
  d
}

model QuizSubmission {
  id          Int      @id @default(autoincrement())
  quizId      Int      @map("quiz_id")
  studentId   Int      @map("student_id")
  score       Int
  timeTaken   Int      @map("time_taken")
  submittedAt DateTime @default(now()) @map("submitted_at")

  // Relations
  quiz    Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student User            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  answers StudentAnswer[]

  @@map("quiz_submissions")
}

model StudentAnswer {
  id             Int            @id @default(autoincrement())
  submissionId   Int            @map("submission_id")
  questionId     Int            @map("question_id")
  selectedOption QuestionOption @map("selected_option")

  // Relations
  submission QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("student_answers")
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String   @db.Text
  userId    Int      @map("user_id")
  isPublic  Boolean  @default(false) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  accesses NoteAccess[]

  @@map("notes")
}

model TeacherRating {
  id        Int      @id @default(autoincrement())
  teacherId Int      @map("teacher_id")
  studentId Int      @map("student_id")
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  teacher User @relation("TeacherRating", fields: [teacherId], references: [id], onDelete: Cascade)
  student User @relation("StudentRating", fields: [studentId], references: [id], onDelete: Cascade)

  @@map("teacher_ratings")
}

model NoteAccess {
  id        Int      @id @default(autoincrement())
  noteId    Int      @map("note_id")
  studentId Int      @map("student_id")
  grantedAt DateTime @default(now()) @map("granted_at")

  // Relations
  note    Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([noteId, studentId], name: "unique_note_access")
  @@map("note_access")
}
